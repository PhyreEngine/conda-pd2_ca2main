--- a/SConstruct	2013-09-17 13:36:14.000000000 +0100
+++ b/SConstruct	2018-02-01 19:25:28.710817429 +0000
@@ -15,20 +15,7 @@
 
 os.system('perl src/setup.pl')
 
-include = Dir('/opt/local/include/')
-lib_path = Dir('/opt/local/lib/');
-
-libs = ['gsl', 'gslcblas', 'boost_system-mt', 'boost_filesystem-mt', 'boost_iostreams-mt' , 'boost_thread-mt', 'pthread', 'z']
-
-#svn_rev = os.popen('svnversion -n .').readline().rstrip()
-#svn_rev = '\\"' + svn_rev + '\\"'
-#hg_rev = os.popen('hg id').readline().rstrip()
-#hg_rev = '\\"' + hg_rev + '\\"'
-#pd2_ver = os.popen('cat src/Version.txt').readline().rstrip()
-#pd2_ver = '\\"' + pd2_ver + '\\"' 
-#comp_date = os.popen('date').readline().rstrip()
-#comp_date = '\\"' + comp_date + '\\"'
-
+libs = ['gsl', 'gslcblas', 'boost_system', 'boost_filesystem', 'boost_iostreams' , 'boost_thread', 'pthread', 'z']
 
 cppdefines = ['USING_SCONS_BUILDER', ('HAVE_INLINE', 1), ('GSL_RANGE_CHECK', 0), 'NDEBUG', ('BOOST_FILESYSTEM_VERSION', 3) ] #[('SVN_REV',svn_rev), ('HG_REV',hg_rev), ('_PRODART_VERSION_', pd2_ver), ('_COMPILE_DATE_', comp_date)]
 gcc_cppflags = ['-ffast-math', '-msse3', '-funroll-loops', '-pipe','-g3', '-Wall', '-fmessage-length=0' ]
@@ -71,68 +58,11 @@
 # for profiling:
 #gcc_link_flags = gcc_link_flags + ['-pg']
 
-gcc_env = Environment(ENV = os.environ, CC = 'gcc', CXX = 'g++', LIBPATH = lib_path, LIBS = libs, CPPDEFINES = cppdefines, CPPFLAGS = gcc_cppflags, LINKFLAGS=gcc_link_flags )   # Create an environmnet
-gcc_env.Append(CPPPATH=["#/src"] + [include])
-
-icc_env = Environment(ENV = os.environ, CC = 'icc', CXX = 'icpc', LIBPATH = lib_path, LIBS = libs, CPPDEFINES = cppdefines, CPPFLAGS = gcc_cppflags, LINKFLAGS=gcc_link_flags )
-icc_env.Append(CPPPATH=["#/src"] + [include])
-
-llvm_gcc_env = Environment(ENV = os.environ, CC = 'llvm-gcc', CXX = 'llvm-g++', LIBPATH = lib_path, LIBS = libs, CPPDEFINES = cppdefines, CPPFLAGS = gcc_cppflags, LINKFLAGS=gcc_link_flags )   # Create an environmnet
-llvm_gcc_env.Append(CPPPATH=["#/src"] + [include])
-
-clang_env = Environment(ENV = os.environ, CC = 'clang', CXX = 'clang++', LIBPATH = lib_path, LIBS = libs, CPPDEFINES = cppdefines, CPPFLAGS = gcc_cppflags, LINKFLAGS=gcc_link_flags )   # Create an environmnet
-clang_env.Append(CPPPATH=["#/src"] + [include])
-
-
-if GetOption('cxx') == None:
-	print "--cxx option not set: ", GetOption('cxx')
-	env = gcc_env
-	print "setting env to gcc_env"
-elif GetOption('cxx') == "g++" or GetOption('cxx') == "gcc":
-        print "--cxx option set: ", GetOption('cxx')
-        env = gcc_env
-        print "setting env to gcc_env"
-elif GetOption('cxx') == "llvm-g++" or GetOption('cxx') == "llvm-gcc":
-        print "--cxx option set: ", GetOption('cxx')
-	env = llvm_gcc_env
-	print "setting env to llvm_gcc_env"
-elif GetOption('cxx') == "clang++" or GetOption('cxx') == "clang":
-	print "--cxx option set: ", GetOption('cxx')
-	env = clang_env
-	print "setting env to clang_env"
-elif GetOption('cxx') == "icc" or GetOption('cxx') == "icpc":
-        print "--cxx option set: ", GetOption('cxx')
-        env = icc_env
-        print "setting env to icc_env"
-else:
-        print "--cxx option set: ", GetOption('cxx')
-	print "ERROR: C++ compiler option not recognised"
-
-
-
-print "CC is:", env['CC']
-print "CXX is:", env['CXX']
-print "LINK is:", env['LINK']
-print "TOOLS is:", env['TOOLS']
-
-
-#print env.Dump()
-
-try:
-	os_cppath = os.environ['INCLUDE'].split(':')
-	env.Append(CPPPATH=os_cppath)
-except KeyError:
-	print "INFO: no OS INCLUDE path found"	
-
-print "CPPPATH =", env['CPPPATH']
-
-try:
-	os_libpath = os.environ['LD_LIBRARY_PATH'].split(':')
-	env.Append(LIBPATH=os_libpath)
-except KeyError:
-	print "INFO: no OS LIBPATH path found"
-
-print "LIBPATH =", env['LIBPATH']
+env = Environment(ENV=os.environ, **os.environ)
+env.Append(LINKFLAGS=env["LDFLAGS"])
+env.Append(CPPPATH=["#/src"])
+env.Append(CPPDEFINES=cppdefines)
+env.Append(LIBS=libs)
 
 
 env.Program(target = "bin/pd2_loop_model", source = ["src/pd2_loop_model.cpp"] + common_sources )
